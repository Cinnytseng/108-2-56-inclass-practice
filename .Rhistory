pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"段(兄|兄弟)"
A_regex<-"他"
B_regex<-","
back_regex<-glue::glue(
"(?<={A_regex})back_regex(?={B_regex})"
)
back_regex<-str_extract_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
back_regex<-"段(兄|兄弟)"
A_regex<-"他"
B_regex<-","
back_regex<-glue::glue(
"(?<={A_regex}){back_regex}(?={B_regex})"
)
back_regex<-str_extract_all(twoNames,back_regex)
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
View(back_regex)
str_view_all(semiGodsSemiDevils$data,"P2")
# context_picked
str_view_all(semiGodsSemiDevils,"P2")
# context_picked
str_extract(semiGodsSemiDevils,"P2")
# context_picked
str_extract(semiGodsSemiDevils,"第二回")
# context_picked
str_view_all(semiGodsSemiDevils,"第二回")
# context_picked
str_detect(semiGodsSemiDevils,"第二回")
# context_picked
str_extract(semiGodsSemiDevils,"第二回")
# context_picked
str_extract(semiGodsSemiDevils$data,"第二回")
# context_picked
str_view_all(semiGodsSemiDevils$data,"第二回")
# context_picked
str_view_all(semiGodsSemiDevils$data,"P2")
# context_picked
str(semiGodsSemiDevils)
# context_picked
str(semiGodsSemiDevils$data)
# context_picked
View(semiGodsSemiDevils)
View(semiGodsSemiDevils[[5]][[1]])
str_view(semiGodsSemiDevils$data,"青衫磊落險峯行")
# context_picked
semiGodsSemiDevils$data$text
# context_picked
semiGodsSemiDevils$data[[2]]
context_picked<-(stringr::str_detect(
semiGodsSemiDevils$data,
"P2"))
# context_picked
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> class(semiGodsSemiDevils)
context_picked<-str(semiGodsSemiDevils$data,"P2")
context_picked<-str(semiGodsSemiDevils,"P2")
context_picked<-str_view(semiGodsSemiDevils,"P2")
context_picked<-semiGodsSemiDevils$data
#context_picked<-
semiGodsSemiDevils$data[[1]]
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
#context_picked<-
semiGodsSemiDevils$data[[1]]
# context_picked
#context_picked<-
str(semiGodsSemiDevils$data[[1]])
# context_picked
#context_picked<-
semiGodsSemiDevils$data[[1]]$text[[3]]
# context_picked
context_picked<-semiGodsSemiDevils$data[[1]]$text[[3]]
context_picked
textExample <- c("段1......。　　段2....。")
str_split(context_picked,{\\s\\s})
target_regex<-"\\s\\s"
str_split(context_picked,"{target_regex}")
target_regex<-"\\s\\s"
str_split(context_picked)
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(context_picked, pattern)
# context_picked_split
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_view(context_picked, pattern)
# context_picked_split
View(context_picked_split)
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_view(context_picked, pattern)
str(context_picked_split)
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_split(context_picked, pattern)
str(context_picked_split)
View(context_picked_split)
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_split(context_picked, pattern)
str(context_picked_split)
target_regex <- "\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_split(context_picked, pattern)
str(context_picked_split)
target_regex <- "\s\s"
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_split(context_picked, pattern)
str(context_picked_split)
str_extract_all(context_picked_split,"段")
# mention_duan
# 目標是前面的唧唧
target_regex2<- "段"
pattern2 <- glue::glue("^{target_regex}")
print(pattern2)
str_extract_all(context_picked_split,pattern2)
# mention_duan
target_regex <- "\\s\\s"
pattern <- glue::glue("^{target_regex}")
print(pattern)
context_picked_split<-str_split(context_picked, pattern)
context_picked_split
# 目標是前面的唧唧
target_regex2<- "段"
pattern2 <- glue::glue("^{target_regex}")
print(pattern2)
mention_duan<-str_extract_all(context_picked_split,pattern2)
mention_duan
# 目標是前面的唧唧
target_regex2<- "段"
pattern2 <- glue::glue("^{target_regex}")
print(pattern2)
mention_duan<-str_view(context_picked_split,pattern2)
mention_duan
mention_duan<-"(?<=段)[:graph:]"
mention_duan
mention_duan<-str_extract_all(context_picked_split,"(?<=段)[:graph:]")
mention_duan
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
factor(studentHeights$學年度)
# studentHeights
factor(studentHeights$學年度)
factor(studentHeights$年齡)
levels(studentHeights$學年度)
# studentHeights
factor(studentHeights$學年度)
factor(studentHeights$年齡)
levels(studentHeights$學年度)
# studentHeights
factor(studentHeights$學年度)
factor(studentHeights$年齡)
levels(studentHeights$學年度)
# studentHeights
factor(studentHeights$學年度)
factor(studentHeights$年齡)
levels(studentHeights$學年度)
# studentHeights
levels(factor(studentHeights$學年度))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(factor(studentHeights$學年度))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(factor(studentHeights$學年度))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(as.integer(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(as.integer(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(as.integer(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(as.integer(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
levels(as.integer(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
as.integer(levels(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
as.integer(levels(factor(studentHeights$學年度)))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
sort(as.integer(levels(factor(studentHeights$學年度))))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
sort(as.integer(levels(factor(studentHeights$年齡))))
#factor(studentHeights$年齡)
#levels(studentHeights$學年度)
# studentHeights
sort(as.integer(levels(factor(studentHeights$年齡,studentHeights$學年度))))
# studentHeights
studentHeights<-c(sort(as.integer(levels(factor(studentHeights$學年度)))),sort(as.integer(levels(factor(studentHeights$年齡)))))
studentHeights
studentHeights<-c(sort(as.integer(levels(factor(studentHeights$學年度)))),sort(as.integer(levels(factor(studentHeights$年齡)))))
studentHeights
studentHeights<-c(sort(as.integer(levels(factor(studentHeights$學年度)))),sort(as.integer(levels(factor(studentHeights$年齡)))))
studentHeights
studentHeights<-c(sort(as.integer(levels(factor(studentHeights$學年度)))),sort(as.integer(levels(factor(studentHeights$年齡)))))
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
sort(as.integer(levels(factor(studentHeights$學年度))))
sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
studentHeights<-sort(as.integer(levels(factor(studentHeights$學年度))))
studentHeights<-sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
studentHeights<-sort(as.integer(levels(factor(studentHeights$學年度))))
studentHeights<-sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度<-sort(as.integer(levels(factor(studentHeights$學年度))))
studentHeights$年齡<-sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度<-sort(levels(factor(studentHeights$學年度)))
studentHeights$年齡<-sort(levels(factor(studentHeights$年齡)))
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度<-sort(as.integer(levels(factor(studentHeights$學年度))))
studentHeights$年齡<-sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度<-sort(as.integer(levels(factor(studentHeights$學年度))))
studentHeights$年齡<-sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
class(studentHeights)
# studentHeights$`年齡層`
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
class(studentHeights)
# studentHeights$`年齡層`
factor(studentHeights)
# studentHeights$`年齡層`
studentHeights[[4]]
# studentHeights$`年齡層`
studentHeights[[5]]
# studentHeights$`年齡層`
studentHeights[[6]]
# studentHeights$`年齡層`
levels(studentHeights) <- c(levels(studentHeights), "年齡層")
# studentHeights$`年齡層`
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
studentHeights$學年度<-sort(as.integer(levels(factor(studentHeights$學年度))))
studentHeights$年齡<-sort(as.integer(levels(factor(studentHeights$年齡))))
studentHeights
studentHeights$年齡層
#levels(studentHeights) <- c(levels(studentHeights), "年齡層")
#studentHeights$`年齡層`
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
View(studentHeights)
studentHeights$`年齡層`
sort(studentHeights$`年齡層`)
levels(studentHeights$年齡層) <- c("6-8","9-12","13-15")
studentHeights$`年齡層`
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
levels(studentHeights$年齡層) <- factor(c("6-8","9-12","13-15"))
studentHeights$`年齡層`
levels(studentHeights$年齡層) <- factor(c("6-8","9-12","13-15"))
studentHeights$`年齡層`
levels(studentHeights$年齡層) <- factor(c("6-8","9-12","13-15"))
studentHeights$`年齡層`
knitr::opts_chunk$set(echo = TRUE)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
library(magrittr)
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
jsonlite::fromJSON("https://quality.data.gov.tw/dq_download_json.php?nid=6020&md5_url=ceedea8b44b88a1bf46b48ab84b8742c", simplifyDataFrame = F) -> cpiByIncome
names(cpiByIncome[[1]]) -> names_element1
# names_element1
names(cpiByIncome[[1]]) -> names_element1
# names_element1
names(cpiByIncome[[1]]) -> names_element1
names_element1
